<?php
/**
 * This module works to help reduce code complexity and increase code reuse by
 * using a hook system to define your CTools wizard.  Here is how to use this module.
 *
 * Within you module, implement hook_wizard_info, which should return the following.
 *
 * function hook_wizard_info
 */

/**
 * Returns the wizard information.
 */
function wizard_helper_info() {
  static $info = array();
  if (!$info) {
    if ($cache = cache_get('wizard_helper_info')) {
      $info = $cache->data;

      // Allow others to alter the information.
      drupal_alter('wizard_info', $info);
    }
    else {
      $info = array();

      // Get the wizard information from other modules.
      foreach (module_implements('wizard_info') as $module) {
        $function = $module . '_wizard_info';
        $result = $function();
        foreach ($result as $path => &$wizard) {
          $wizard['module'] = $module;
          $wizard['path'] = $path;
          $wizard['id'] = isset($wizard['id']) ? $wizard['id'] : str_replace('/', '_', $path);
          $wizard['pages'] = isset($wizard['pages']) ? $wizard['pages'] : array();
          $wizard['title'] = isset($wizard['title']) ? $wizard['title'] : '';
          $wizard['access callback'] = isset($wizard['access callback']) ? $wizard['access callback'] : 'user_access';
          $wizard['access arguments'] = isset($wizard['access arguments']) ? $wizard['access arguments'] : array('access content');
          $wizard['title'] = isset($wizard['title']) ? $wizard['title'] : '';
          $wizard['wizard_path'] = isset($wizard['wizard_path']) ? $wizard['wizard_path'] : drupal_get_path('module', $module) . '/' . $wizard['id'];
          $wizard['form id'] = isset($wizard['form id']) ? $wizard['form id'] : $wizard['module'] . '_' . $wizard['id'];
          $wizard['object name'] = isset($wizard['object name']) ? $wizard['object name'] : $wizard['form id'];
          $wizard['context id'] = 0;
          $wizard['pageids'] = isset($wizard['pageids']) ? $wizard['pageids'] : array();
          $wizard['cancel path'] = isset($wizard['cancel path']) ? $wizard['cancel path'] : $path;
          $wizard['return path'] = isset($wizard['return path']) ? $wizard['return path'] : $path;
          $wizard['access'] = TRUE;

          // Iterate though the pages and assign page ids.
          if (!empty($wizard['pages'])) {
            foreach ($wizard['pages'] as $page => $title) {
              if (!isset($wizard['pageids'][$page])) {
                $wizard['pageids'][$page] = $wizard['form id'] . '_' . $page;
              }
            }
          }
        }
        $info = array_merge($info, $result);
      }

      // Allow others to alter the information.
      drupal_alter('wizard_info', $info);

      // Set this in cache.
      cache_set('wizard_helper_info', $info);
    }
  }
  return $info;
}

/**
 * Implements hook_menu().
 */
function wizard_helper_menu() {
  $items = array();
  $info = wizard_helper_info();
  foreach ($info as $path => $wizard) {
    $parts = explode('/', $path);
    $index = count($parts);
    $items[$path] = array(
      'title' => $wizard['title'],
      'page callback' => 'wizard_helper_wizard',
      'page arguments' => array($index, ($index + 1)),
      'access callback' => $wizard['access callback'],
      'access arguments' => $wizard['access arguments'],
      'type' => MENU_CALLBACK,
    );
    $items[$path . '/%/%ctools_js'] = $items[$path];
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function wizard_helper_theme() {
  $themes = array();

  // Get the wizard information.
  $info = wizard_helper_info();

  // Iterate through all wizards.
  foreach ($info as $path => $wizard) {

    // Get all the wizard helper page ids.
    foreach ($wizard['pageids'] as $page => $id) {

      // Add the template if the file exists.
      if (file_exists(getcwd() . '/' . $wizard['wizard_path'] . '/' . $id . '.tpl.php')) {

        // Add the template.
        $themes[$id] = array(
          'template'  => $id,
          'path' => $wizard['wizard_path'],
          'arguments' => array('form' => NULL)
        );
      }
    }
  }

  // Return the themes.
  return $themes;
}

/**
 * This function will include a form from the wizard_helper.
 *
 * @param string $form_id
 *   The full name of the form file to include.
 * @param boolean $force_load
 *   If TRUE, will load the file even if it's not a step in the wizard.
 */
function wizard_helper_include_form($form_id, $force_load = FALSE) {
  // Get the wizard information.
  $info = wizard_helper_info();
  foreach ($info as $path => $wizard) {
    // Determine if the page should be loaded.
    if ($force_load || in_array($form_id, $wizard['pageids'])) {
      $file = getcwd() . '/' . $wizard['wizard_path'] . '/' . $form_id . '.inc';
      if (file_exists($file)) {
        require_once $file;
      }
    }
  }
}

/**
 * Implements hook_forms().
 */
function wizard_helper_forms($form_id, $args) {
  $forms = array();
  $info = wizard_helper_info();
  foreach ($info as $path => $wizard) {
    foreach ($wizard['pageids'] as $page => $id) {
      $forms[$id] = array(
        'callback' => 'wizard_helper_page_form',
        'callback arguments' => array($form_id, $args)
      );
    }
  }
  return $forms;
}

/**
 * Load function for the wizard.
 */
function wizard_helper_load($path) {
  $info = wizard_helper_info();
  $wizard = $info[$path];
  $wizard['object'] = wizard_helper_cache_get($wizard);
  return $wizard;
}


/**
 * Returns the wizard information for this path.
 */
function wizard_helper_get_info() {
  $item = menu_get_item();
  return wizard_helper_load(rtrim($item['path'], '/%'));
}

/**
 * Adds a common form function for all wizard forms.  This fixes several
 * issues with adding AHAH within your forms.
 */
function wizard_helper_page_form(&$form_state, $form_id, $args) {
  // Include the form.
  $form = array();
  ctools_include('wizard');
  ctools_wizard_wrapper($form, $form_state);
  wizard_helper_include_form($form_id);
  if (function_exists($form_id)) {
    $form_id($form, $form_state);
  }
  return $form;
}

function wizard_helper_form($wizard, $step, $js, $form_state = array()) {
  // Include the ctools wizard stuff.
  ctools_include('wizard');
  ctools_include('ajax');

  // Setup the form_state.
  $form_state = array_merge(array(
    $wizard['object name'] => $wizard['object'],
    'wizard_info' => $wizard,
    'title' => $wizard['title'],
    'ajax' => $js
  ), $form_state);

  // Set the pages.
  $pages = $wizard['pages'];

  // Return nothing if there are no pages.
  if (empty($pages)) {
    return array();
  }

  // Set all the pages for this wizard.
  $forms = array();
  foreach( $wizard['pageids'] as $page => $id ) {
    $forms[$page] = array('form id' => $id);
    $file = $wizard['wizard_path'] . '/' . $id . '.inc';
    // @todo - this should only be checked when the for is created - wasting
    // cycles checking for files that are never loaded.
    if (file_exists(getcwd() . '/' . $file)) {
      $forms[$page]['include'] = $file;
    }
  }

  // Setup our CTools multistep form.
  $form_info = array(
    'id' => $wizard['form id'],
    'path' => $wizard['path'] . "/%step/" . ($js ? 'ajax' : 'nojs'),
    'next callback' => 'wizard_helper_next',
    'finish callback' => 'wizard_helper_finish',
    'return callback' => 'wizard_helper_finish',
    'cancel callback' => 'wizard_helper_cancel',
    'order' => $pages,
    'forms' => $forms
  );

  // Setup the defaults for the wizard information.
  $defaults = array(
    'show trail' => TRUE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    'cancel path' => '',
    'return path' => ''
  );

  // Add the defaults to the form, and then bring in those values from the
  // wizard.
  $form_info = array_merge(
    array_merge($form_info, $defaults),
    array_intersect_key($wizard, $defaults)
  );

  // If there is no step, then set it to the first item in the array.
  if (!$step) {
    reset($pages);
    $step = key($pages);
  }

  // Store the registration object in $_SESSION.
  $_SESSION[$wizard['object name']] = $wizard['object'];

  $form_info['wrapper'] = 'wizard_helper_wrapper';

  // Create our multistep drupal form.
  return ctools_wizard_multistep_form($form_info, $step, $form_state);
}

/**
 * A callback to modify the form just before it's built.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form_state array object.
 */
function wizard_helper_wrapper(&$form, &$form_state) {
  $wizard = wizard_helper_get_info();
  // Override the back button with the trail setting.
  $form['buttons']['previous']['#next'] = wizard_helper_trail_previous($wizard);
}

/**
 * Get the correct context.
 *
 * @return {string} The step for the user.
 */
function wizard_helper_set_context($wizard, $step, $js) {
  global $user;

  // We only do this for valid sessions.
  if (!empty($user->sid)) {

    // If no step is provided, but they have a previous context, then send them
    // to the correct spot and provide a message if need be.
    if (!$step && !empty($wizard['object']) && $wizard['object']['step']) {

      // If the wizard wishes to say something to the user.
      if (!empty($wizard['restore message'])) {

        // Print a message so they know what is up.
        drupal_set_message($wizard['restore message']);
      }

      // Now goto the correct context.
      drupal_goto($wizard['path'] . '/' . $wizard['object']['step'] . '/' . ($js ? $js : 'nojs'));
    }
  }
}

/**
 * Wizard callback function.
 */
function wizard_helper_wizard($step = '', $js = '') {

  // Get the wizard information for this path.
  if ($wizard = wizard_helper_get_info()) {

    // Set the correct context for this wizard.
    wizard_helper_set_context($wizard, $step, $js);

    // Make sure we have a context object defined.
    if (empty($wizard['object'])) {
      $wizard['object'] = array();
    }

    // Call the wizard callback to alter the info at runtime.
    if (isset($wizard['wizard callback'])) {
      $function = $wizard['wizard callback'];
      $function($step, $wizard);
    }

    // Remember the last page we were on.
    $previous_step = isset($wizard['object']['step']) ? $wizard['object']['step'] : '';

    // Set the current context.
    if ($step && (empty($wizard['object']['step']) || ($step != $wizard['object']['step']))) {
      $wizard['object']['step'] = $step;
      wizard_helper_cache_set($wizard, $wizard['object']);
    }

    // If there is no step set at this point.
    if (empty($step) && !empty($wizard['pages'])) {
      // Set the step to the first page.
      reset($wizard['pages']);
      $step = key($wizard['pages']);
    }

    // Make sure there are pages.
    if (empty($wizard['pages'])) {
      drupal_not_found();
      return;
    }

    // Make sure they have access or follow a redirect.
    wizard_helper_check_access_redirect($wizard, $step);

    // Make sure the current page is in the step trail.
    if (wizard_helper_trail_add($wizard, $previous_step, $step)) {
      wizard_helper_cache_set($wizard, $wizard['object']);
    }

    // If there is already output, then return it here.
    if (!empty($wizard['output'])) {
      return $wizard['output'];
    }

    // Return the wizard helper form.
    return wizard_helper_form($wizard, $step, $js);
  }

  // Return 404 if we cannot find the information.
  drupal_not_found();
}

/**
 * Check a step's access function to redirect, lockout page, or continue to display.
 *
 * @param array $wizard
 *   The wizard object.
 * @param string $step
 *   The current step.
 */
function wizard_helper_check_access_redirect(&$wizard, $step) {
  // Check for an access function.
  wizard_helper_include_form($wizard['object name'] . '_' . $step);
  $access_function = $wizard['object name'] . '_' . $step . '_access';
  if (function_exists($access_function)) {
    $wizard['access'] = $access_function($wizard);
  }

  // Make sure we have access.
  if (empty($wizard['access'])) {
    drupal_access_denied();
    module_invoke_all('exit');
    exit();
  }
  elseif (is_string($wizard['access'])) {
    wizard_helper_goto($wizard, $wizard['access']);
  }
}

/**
 * Go to a page within the wizard without it resetting context.
 */
function wizard_helper_goto($wizard, $step = '') {

  // Make sure the current page is in the step trail.
  $previous_step = isset($wizard['object']['step']) ? $wizard['object']['step'] : '';
  wizard_helper_trail_add($wizard, $previous_step, $step);

  // Set the current step.
  $wizard['object']['step'] = $step;

  // Save the wizard.
  wizard_helper_cache_set($wizard, $wizard['object']);

  // Redirect.
  $path = $wizard['path'];
  $path .= $step ? '/' . $step : '';
  $query = $_GET;
  unset($query['q']);
  drupal_goto($path, $query);
}

/**
 * Gets the name of the cache.
 */
function wizard_helper_cache_name($wizard) {
  $name = $wizard['object name'];
  if (!empty($wizard['context id'])) {
    $name .= '_' . $wizard['context id'];
  }
  $name .= '_' . session_id();
  return $name;
}

/**
 * Set the object cache.
 *
 * @param array $wizard
 *   The wizard object.
 * @param array $value
 *   The cached data to save.
 * @param boolean $save_sid
 *   If false, the data will be saved without a sid and can only be accessed
 *   with a direct link containing the mongo _id.
 */
function wizard_helper_cache_set($wizard, &$value, $save_sid = TRUE) {

  // Set the cache.
  $cid = wizard_helper_cache_name($wizard);
  cache_set($cid, $value);

  // If the cache type is mongo, then save to mongo too.
  if ($wizard['cache_type'] == 'mongo') {
    $_id = (!empty($value['_id'])) ? $value['_id'] : NULL;

    // Unset values that are not serialized.
    $data = $value;
    unset($data['_id']);
    unset($data['sid']);
    unset($data['wizard']);
    unset($data['time']);

    // Update required values.
    $insert_value = array(
      'wizard' => $cid,
      'time' => time(),
      'data' => $data,
    );
    if ($save_sid) {
      $insert_value['sid'] = session_id();
    }

    // Initialize mongodb.
    $collection = mongodb_collection($wizard['mongo_collection']);

    if (!empty($_id)) {
      // Cache already exists, update it.
      $criteria = array('_id' => $_id);
      $collection->update($criteria, $insert_value);
    }
    else {
      // Create new cache.
      $collection->insert($insert_value);
      $value['_id'] = $insert_value['_id'];
    }
  }
}

/**
 * Get the object cache.
 *
 * @param array $wizard
 *   The wizard object.
 * @param string $_id
 *   The mongodb ID to load the cache explicitly.
 *
 * @return array
 *   The cached data array.
 */
function wizard_helper_cache_get($wizard, $_id = NULL) {
  $cid = wizard_helper_cache_name($wizard);
  $cache = cache_get($cid);
  if ($cache) {
    return $cache->data;
  }
  elseif ($wizard['cache_type'] == 'mongo') {

    // Get the cache from mongo.
    $criteria = array(
      'wizard' => $cid,
    );
    if ($_id) {
      $criteria['_id'] = new MongoId($_id);
    }
    else {
      $criteria['sid'] = session_id();
      if (empty($criteria['sid'])) {
        return NULL;
      }
    }

    // Load the document.
    $collection = mongodb_collection($wizard['mongo_collection']);
    $document = $collection->findOne($criteria);

    if ($document) {
      $data = $document['data'];
      if (is_string($data)) {
        // Unserialize the main content.
        $data = unserialize($data);
      }
      unset($document['data']);

      if ($data) {
        // Merge the main content back into the document.
        return array_merge($data, $document);
      }
      else {
        return $document;
      }
    }
  }

  // Nothing cached.
  return array();
}

/**
 * Clear the object cache.
 *
 * @param array $wizard
 *   The wizard object.
 * @param string $_id
 *   The mongodb id. If supplied this item will be cleared
 *   otherwise the session id will be used.
 */
function wizard_helper_cache_clear($wizard, $_id = NULL) {

  // Clear the cache.
  $cid = wizard_helper_cache_name($wizard);
  cache_set($cid, array());

  if ($wizard['cache_type'] == 'mongo') {
    $criteria = array(
      'wizard' => $cid,
    );
    if ($_id) {
      $criteria['_id'] = new MongoId($_id);
    }
    else {
      $criteria['sid'] = session_id();
      if (empty($criteria['sid'])) {
        return FALSE;
      }
    }

    $collection = mongodb_collection('group_registration_cache');
    $collection->remove($criteria);
  }
}

/**
 * Callback for the proceed step.
 */
function wizard_helper_next(&$form_state) {
  $wizard = $form_state['wizard_info'];
  wizard_helper_cache_set($wizard, $form_state[$wizard['object name']]);
}

/**
 * Callback generated when the wizard is finished.
 */
function wizard_helper_finish(&$form_state) {
  $wizard = $form_state['wizard_info'];
  // Remove the cache object.
  if (empty($form_state[$wizard['object name']]['save_cache'])) {
    wizard_helper_cache_clear($wizard);
  }
  else {
    // Remove the sid but save the wizard.
    wizard_helper_cache_set($wizard, $wizard['object'], FALSE);
  }
  // Run finalization processes.
  $function = $wizard['wizard finish'];
  if (function_exists($function)) {
    $function($form_state[$wizard['object name']]);
  }
  $form_state['complete'] = TRUE;
}

/**
 * Callback for the cancel.
 */
function wizard_helper_cancel(&$form_state) {
  $wizard = $form_state['wizard_info'];
  wizard_helper_cache_clear($wizard);
  $form_state['executed'] = TRUE;
  $form_state['cancel'] = TRUE;
  if (!empty($wizard['cancel message'])) {
    drupal_set_message($wizard['cancel message']);
  }

  // Call a callback for the wizard.
  if (is_callable($wizard['wizard cancel'])) {
    $wizard['wizard cancel']($wizard);
  }
}

/**
 * Add a new step to the trail, replacing future steps if the wizard is changing course.
 *
 * @param array $wizard
 *   The wizard object.
 * @param string $current_step
 *   The current step.
 * @param string $new_step
 *   The next page to add.
 *
 * @return boolean
 *   TRUE if the trail was actually modified.
 */
function wizard_helper_trail_add(&$wizard, $current_step, $new_step) {
  // If there is no step trail, then just add the new one.
  if (!isset($wizard['object']['step_trail'])) {
    $wizard['object']['step_trail'] = array($new_step);
    return TRUE;
  }

  // Find locate the steps in the trail.
  $current_step_id = array_search($current_step, $wizard['object']['step_trail']);
  $new_step_id = array_search($new_step, $wizard['object']['step_trail']);
  // If the next step is already in the trail, they just stepped back.
  if ($new_step_id !== FALSE) {
    return FALSE;
  }
  // If the previous page can't be found.
  elseif ($current_step_id === FALSE) {
    $wizard['object']['step_trail'][] = $new_step;
    return TRUE;
  }
  // If the next step in the trail is not the next step.
  elseif (
    $current_step != $new_step
    && (
      empty($wizard['object']['step_trail'][$current_step_id + 1])
      || $wizard['object']['step_trail'][$current_step_id + 1] != $new_step
    )
  ) {
    // Trim the trail and add the new step.
    array_splice($wizard['object']['step_trail'], $current_step_id + 1);
    $wizard['object']['step_trail'][] = $new_step;
    return TRUE;
  }
  return FALSE;
}

/**
 * Determine the step that was accessed prior to the current step.
 *
 * @param array $wizard
 *   The wizard object.
 *
 * @return string
 *   The step before the current step.
 */
function wizard_helper_trail_previous(&$wizard) {
  $current_step_id = array_search($wizard['object']['step'], $wizard['object']['step_trail']);
  if ($current_step_id > 0) {
    return $wizard['object']['step_trail'][$current_step_id - 1];
  }
  elseif (!empty($wizard['object']['step_trail'][0])) {
    return $wizard['object']['step_trail'][0];
  }
  else {
    return $wizard['object']['step'];
  }
}
