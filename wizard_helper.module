<?php
/**
 * This module works to help reduce code complexity and increase code reuse by
 * using a hook system to define your CTools wizard.  Here is how to use this module.
 *
 * Within you module, implement hook_wizard_info, which should return the following.
 *
 * function hook_wizard_info
 */

/**
 * Returns the wizard information.
 */
function wizard_helper_info() {
  static $info = array();
  if (!$info) {
    if ($cache = cache_get('wizard_helper_info')) {
      $info = $cache->data;
    }
    else {
      $info = array();

      // Get the wizard information from other modules.
      foreach (module_implements('wizard_info') as $module) {
        $function = $module .'_wizard_info';
        $result = $function();
        foreach ($result as $path => &$wizard) {
          $wizard['module'] = $module;
          $wizard['path'] = $path;
          $wizard['id'] = isset($wizard['id']) ? $wizard['id'] : str_replace('/', '_', $path);
          $wizard['pages'] = isset($wizard['pages']) ? $wizard['pages'] : array('error' => '');
          $wizard['title'] = isset($wizard['title']) ? $wizard['title'] : '';
          $wizard['access callback'] = isset($wizard['access callback']) ? $wizard['access callback'] : 'user_access';
          $wizard['access arguments'] = isset($wizard['access arguments']) ? $wizard['access arguments'] : array('access content');
          $wizard['title'] = isset($wizard['title']) ? $wizard['title'] : '';
          $wizard['wizard_path'] = isset($wizard['wizard_path']) ? $wizard['wizard_path'] : drupal_get_path('module', $module) . '/' . $wizard['id'];
          $wizard['form id'] = isset($wizard['form id']) ? $wizard['form id'] : $wizard['module'] . '_' . $wizard['id'];
          $wizard['object name'] = isset($wizard['object name']) ? $wizard['object name'] : $wizard['form id'];
          $wizard['pageids'] = isset($wizard['pageids']) ? $wizard['pageids'] : array();
          $wizard['cancel path'] = isset($wizard['cancel path']) ? $wizard['cancel path'] : $path;
          $wizard['return path'] = isset($wizard['return path']) ? $wizard['return path'] : $path;
          $wizard['access'] = TRUE;

          // Iterate though the pages and assign page ids.
          foreach ($wizard['pages'] as $page => $title) {
            if (!isset($wizard['pageids'][$page])) {
              $wizard['pageids'][$page] = $wizard['form id'] . '_' . $page;
            }
          }
        }
        $info = array_merge($info, $result);
      }

      // Allow others to alter the information.
      drupal_alter('wizard_info', $info);

      // Set this in cache.
      cache_set('wizard_helper_info', $info);
    }
  }
  return $info;
}

/**
 * Implements hook_menu().
 */
function wizard_helper_menu() {
  $items = array();
  $info = wizard_helper_info();
  foreach ($info as $path => $wizard) {
    $parts = explode('/', $path);
    $index = count($parts);
    $items[$path] = array(
      'title' => $wizard['title'],
      'page callback' => 'wizard_helper_wizard',
      'page arguments' => array($index, ($index + 1)),
      'access callback' => $wizard['access callback'],
      'access arguments' => $wizard['access arguments'],
      'type' => MENU_CALLBACK,
    );
    $items[$path . '/%ctools_js'] = $items[$path];
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function wizard_helper_theme() {
  $themes = array();

  // Get the wizard information.
  $info = wizard_helper_info();

  // Iterate through all wizards.
  foreach ($info as $path => $wizard) {

    // Get all the wizard helper page ids.
    foreach( $wizard['pageids'] as $page => $id ) {

      // Add the template if the file exists.
      if (file_exists(getcwd() . '/' . $wizard['wizard_path'] . '/' . $id . '.tpl.php')) {

        // Add the template.
        $themes[$id] = array(
          'template'  => $id,
          'path' => $wizard['wizard_path'],
          'arguments' => array('form' => NULL )
        );
      }
    }
  }

  // Return the themes.
  return $themes;
}

/**
 * This function will include a form from the wizard_helper.
 */
function wizard_helper_include_form($form_id) {
  // Get the wizard information.
  $info = wizard_helper_info();
  foreach ($info as $path => $wizard) {
    foreach( $wizard['pageids'] as $page => $id ) {
      if ($id == $form_id) {
        require_once $wizard['wizard_path'] . '/' . $id . '.inc';
        break;
      }
    }
  }
}

/**
 * Implements hook_forms
 */
function wizard_helper_forms($form_id, $args) {
  $forms = array();
  $info = wizard_helper_info();
  foreach ($info as $path => $wizard) {
    foreach( $wizard['pageids'] as $page => $id ) {
      $forms[$id] = array(
        'callback' => 'wizard_helper_page_form',
        'callback arguments' => array($form_id, $args)
      );
    }
  }
  return $forms;
}

/**
 * Load function for the wizard.
 */
function wizard_helper_load($path) {
  $info = wizard_helper_info();
  return $info[$path];
}


/**
 * Returns the wizard information for this path.
 */
function wizard_helper_get_info() {
  $item = menu_get_item();
  return wizard_helper_load(rtrim($item['path'], '/%'));
}

/**
 * Adds a common form function for all wizard forms.  This fixes several
 * issues with adding AHAH within your forms.
 */
function wizard_helper_page_form(&$form_state, $form_id, $args) {
  // Include the form.
  $form = array();
  ctools_include('wizard');
  ctools_wizard_wrapper($form, $form_state);
  wizard_helper_include_form($form_id);
  if (function_exists($form_id)) {
    $form_id($form, $form_state);
  }
  return $form;
}

function wizard_helper_form($wizard, $js, $step, $form_state = array()) {
  // Include the ctools wizard stuff.
  ctools_include('wizard');
  ctools_include('ajax');

  // Setup the form_state.
  $form_state = array_merge(array(
    $wizard['object name'] => wizard_helper_cache_get($wizard),
    'wizard_info' => $wizard,
    'title' => $wizard['title'],
    'ajax' => $js
  ), $form_state);

  // Set the pages.
  $pages = $wizard['pages'];

  // Set all the pages for this wizard.
  $forms = array();
  foreach( $wizard['pageids'] as $page => $id ) {
    $forms[$page] = array(
      'form id' => $id,
      'include' => $wizard['wizard_path'] . '/' . $id . '.inc'
    );
  }

  // Setup our CTools multistep form.
  $form_info = array(
    'id' => $wizard['form id'],
    'path' => $wizard['path'] . "/" . ($js ? 'ajax' : 'nojs') . "/%step",
    'next callback' =>  'wizard_helper_next',
    'finish callback' => 'wizard_helper_finish',
    'return callback' => 'wizard_helper_finish',
    'cancel callback' => 'wizard_helper_cancel',
    'order' => $pages,
    'forms' => $forms
  );

  // Setup the defaults for the wizard information.
  $defaults = array(
    'show trail' => TRUE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    'cancel path' => '',
    'return path' => ''
  );

  // Add the defaults to the form, and then bring in those values from the
  // wizard.
  $form_info = array_merge(
    array_merge($form_info, $defaults),
    array_intersect_key($wizard, $defaults)
  );

  // Create our multistep drupal form.
  $step = $step ? $step : $pages[0];
  return ctools_wizard_multistep_form($form_info, $step, $form_state);
}

/**
 * Wizard callback function.
 */
function wizard_helper_wizard($js = '', $step = '') {

  // Get the wizard information for this path.
  if ($wizard = wizard_helper_get_info()) {

    // Call the wizard callback to alter the info at runtime.
    if (isset($wizard['wizard callback'])) {
      $function = $wizard['wizard callback'];
      $function($step, $wizard);
    }

    // Make sure there are pages.
    if (!$wizard['pages']) {
      drupal_not_found();
      return;
    }

    // Make sure we have access.
    if (!$wizard['access']) {
      drupal_access_denied();
      return;
    }

    // If there is already output, then return it here.
    if ($wizard['output']) {
      return $wizard['output'];
    }

    // Return the wizard helper form.
    return wizard_helper_form($wizard, $js, $step);
  }

  // Return 404 if we cannot find the information.
  drupal_not_found();
}

/**
 * Set the object cache.
 */
function wizard_helper_cache_set($wizard, $value) {
  global $user;
  ctools_include('object-cache');
  ctools_object_cache_set($wizard['object name'], $user->sid, $value);
}

/**
 * Get the object cache.
 */
function wizard_helper_cache_get($wizard) {
  global $user;
  ctools_include('object-cache');
  return ctools_object_cache_get($wizard['object name'], $user->sid);
}

/**
 * Clear the object cache.
 */
function wizard_helper_cache_clear($wizard) {
  global $user;
  ctools_include('object-cache');
  ctools_object_cache_clear($wizard['object name'], $user->sid);
}

/**
 * Callback for the proceed step
 */
function wizard_helper_next(&$form_state) {
  $wizard = $form_state['wizard_info'];
  wizard_helper_cache_set($wizard, $form_state[$wizard['object name']]);
}

/**
 * Callback generated when the wizard is finished.
 */
function wizard_helper_finish(&$form_state) {
  $wizard = $form_state['wizard_info'];
  wizard_helper_cache_clear($wizard);
  $function = $wizard['wizard finish'];
  if (function_exists($function)) {
    $function($form_state);
  }
}

/**
 * Callback for the cancel.
 */
function wizard_helper_cancel(&$form_state) {
  $wizard = $form_state['wizard_info'];
  wizard_helper_cache_clear($wizard);
  drupal_set_message($wizard['cancel message']);
  $form_state['cancel'] = TRUE;
}
